name: Swift CI

on:
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  setup-environment:
    name: Setup Environment
    runs-on:
      - self-hosted
      - label-1

    steps:
      - name: Show macOS and Xcode info
        run: |
          sw_vers
          xcodebuild -version
          swift --version
          ls /Applications | grep Xcode

      - name: Set up Xcode 16.4
        run: sudo xcode-select -s /Applications/Xcode.app

      - name: Show available simulators
        run: |
          xcrun simctl list devices
          echo "Booted Simulators:"
          xcrun simctl list devices | grep Booted

  analyze:
    name: Analyze Project
    needs: setup-environment
    runs-on:
      - self-hosted
      - label-1

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Run Xcode Analyze
        run: |
          xcodebuild analyze \
          -project XcodeProjectForCICD.xcodeproj \
          -scheme XcodeProjectForCICD \
          -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.5' \
          -sdk iphonesimulator \
          -configuration Debug

  swiftlint:
    name: SwiftLint
    runs-on: ubuntu-latest
    needs: setup-environment  # optional, remove if not needed

    steps:
      - uses: actions/checkout@v3
      - name: GitHub Action for SwiftLint
        uses: stanfordbdhg/action-swiftlint@v4

  build:
    name: Build Project
    needs: analyze
    runs-on:
      - self-hosted
      - label-1

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Build project with Xcode
        run: |
          xcodebuild build \
          -project XcodeProjectForCICD.xcodeproj \
          -scheme XcodeProjectForCICD \
          -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.5'

  test:
    name: Run Unit Tests
    needs: build
    runs-on:
      - self-hosted
      - label-1

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Run Unit Tests with Coverage
        run: |
            xcodebuild test \
            -project XcodeProjectForCICD.xcodeproj \
            -scheme XcodeProjectForCICD \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.5' \
            -enableCodeCoverage YES \
            -resultBundlePath result.bundle

      - name: Generate Code Coverage Report
        run: |
          xcrun xccov view --report result.bundle > coverage.txt
          xcrun xccov view --report --json result.bundle > coverage.json

      - name: Upload Code Coverage Text Report
        uses: actions/upload-artifact@v4
        with:
          name: CodeCoverageReport
          path: coverage.txt

      - name: Upload Code Coverage JSON Report
        uses: actions/upload-artifact@v4
        with:
          name: CodeCoverageReportJSON
          path: coverage.json

      - name: Upload Xcode Result Bundle
        uses: actions/upload-artifact@v4
        with:
          name: XcodeResultBundle
          path: result.bundle