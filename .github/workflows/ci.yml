name: Swift CI

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

jobs:
  build-and-test:
    name: Build & Test (XcodeProjectForCICD)
    runs-on:
      - self-hosted
      - label-1
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Show macOS version
        run: sw_vers

      - name: List available Xcode versions
        run: ls /Applications | grep Xcode

      - name: Show available simulators (for debugging)
        run: xcrun simctl list devices

      - name: Show Only Booted/Opened simulators
        run: xcrun simctl list devices | grep Booted

      - name: Set up Xcode 16.4
        run: sudo xcode-select -s /Applications/Xcode.app

      - name: Show selected Xcode version
        run: xcodebuild -version

      - name: Display Swift version
        run: swift --version

      - name: List available simulators
        run: xcrun simctl list devices

      - name: Setup Homebrew PATH (Apple Silicon)
        run: echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile && eval "$(/opt/homebrew/bin/brew shellenv)"
      
      - name: Add Homebrew to PATH manually
        run: |
          export PATH="/opt/homebrew/bin:$PATH"
          brew --version
          brew install swiftlint

      - name: Install Homebrew (if not installed)
        run: |
          if ! command -v brew &> /dev/null; then
          echo "Installing Homebrew..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
          eval "$(/opt/homebrew/bin/brew shellenv)"
          fi

      - name: Install SwiftLint
        run: |
          brew install swiftlint

      - name: Run SwiftLint
        run: |
          swiftlint --strict

      - name: Boot iPhone 16 simulator
        run: |
          UDID=$(xcrun simctl list devices | grep -m1 'iPhone 16' | awk -F '[()]' '{print $2}')
           echo "Booting simulator with UDID: $UDID"
           xcrun simctl boot "$UDID" || true
           xcrun simctl bootstatus "$UDID" -b
           
      - name: Install xcpretty
        run: sudo gem install xcpretty
      - name: Build project with Xcode
        run: |
          UDID=$(xcrun simctl list devices | grep -m1 'iPhone 16 Pro' | awk -F '[()]' '{print $2}')
          echo "Using UDID: $UDID"
          xcodebuild build \
          -project XcodeProjectForCICD.xcodeproj \
          -scheme XcodeProjectForCICD \
          -destination "id=$UDID" \
          | xcpretty

      - name: Run Unit Tests
        run: |
          xcodebuild test \
            -project XcodeProjectForCICD.xcodeproj \
            -scheme XcodeProjectForCICD \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.5' \
            -enableCodeCoverage YES \
            | xcpretty

      - name: Print Code Coverage Report
        run: |
          TEST_RESULT=$(find ~/Library/Developer/Xcode/DerivedData -name "*.xcresult" | sort | tail -n 1)
          echo "Found result at: $TEST_RESULT"
          xcrun xccov view --report "$TEST_RESULT"
          
      - name: Upload Code Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: CodeCoverageReport
          path: path/to/code-coverage.txt

      - name: Upload All CI Logs
        uses: actions/upload-artifact@v4
        with:
          name: AllLogs
          path: logs/*.log

      - name: Upload Xcode Result Bundle
        uses: actions/upload-artifact@v4
        with:
          name: XcodeResultBundle
          path: result.bundle